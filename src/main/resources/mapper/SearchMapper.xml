<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.test.search.SearchMapper">
    <select id="searchNovels" resultType="com.test.novel.NovelVO">
        SELECT
            nv.nv_id,
            nv.nv_title,
            nv.nv_desc,
            nv.cover_path,
            nv.updated_at,
            nv.is_adult,
            nv.is_secret,
            u.nickname,
            (SELECT COUNT(*) FROM novel_subscribe WHERE nv_id = nv.nv_id) AS subscribeCount,
            COALESCE((SELECT 1 FROM novel_subscribe WHERE userno = #{userno} AND nv_id = nv.nv_id), 0) AS isSubscribed,
            COALESCE(SUM(lk.likeCount), 0) AS likeCount,
            COALESCE(SUM(co.commentCount), 0) AS commentCount,
            COALESCE(SUM(ev.ep_views), 0) AS totalViews,
            ctg.nvctg_name AS nvctg_name
        FROM novels nv
                 JOIN users u ON nv.userno = u.userno
                 LEFT JOIN episode ev ON nv.nv_id = ev.nv_id
                 LEFT JOIN (SELECT ep_id, COUNT(*) AS likeCount FROM ep_likes GROUP BY ep_id) lk ON ev.ep_id = lk.ep_id
                 LEFT JOIN (SELECT ep_id, COUNT(*) AS commentCount FROM comments GROUP BY ep_id) co ON ev.ep_id = co.ep_id
                 JOIN nvctg_list nvl ON nv.nv_id = nvl.nv_id
                 JOIN nvctg ctg ON nvl.nvctg_id = ctg.nvctg_id
        WHERE nv.is_secret != 1
            AND (REGEXP_LIKE(nv.nv_title, #{keywords}, 'i') OR REGEXP_LIKE(nv.nv_desc, #{keywords}, 'i'))
        <!-- exclude Options -->
        <if test="excludeWordText != '' and excludeWordOptions != null">
            <if test="excludeWordOptions.contains('tags')">
                AND NOT EXISTS (
                SELECT 1
                FROM nvtag_list ntl
                JOIN nvtag nt ON ntl.nvtag_id = nt.nvtag_id
                WHERE ntl.nv_id = nv.nv_id
                <foreach item="word" collection="excludeWords">
                    AND NOT REGEXP_LIKE(nt.nvtag_name, #{word}, 'i')
                </foreach>
                )
            </if>
            <if test="excludeWordOptions.contains('title')">
                <foreach item="word" collection="excludeWords">
                    AND NOT REGEXP_LIKE(nv.nv_title, #{word}, 'i')
                </foreach>
            </if>
            <if test="excludeWordOptions.contains('author')">
                <foreach item="word" collection="excludeWords">
                    AND NOT REGEXP_LIKE(u.nickname, #{word}, 'i')
                </foreach>
            </if>
            <if test="excludeWordOptions.contains('desc')">
                <foreach item="word" collection="excludeWords">
                    AND NOT REGEXP_LIKE(nv.nv_desc, #{word}, 'i')
                </foreach>
            </if>
        </if>

        <if test="isFree != 2">
            AND nv.is_Free = #{isFree}
        </if>
        <if test="isAdult != 2">
            AND nv.is_Adult = #{isAdult}
        </if>
        <if test="isCompleted != 2">
            AND nv.is_Completed = #{isCompleted}
        </if>
        <![CDATA[
            AND (SELECT COUNT(*) FROM episode ev WHERE ev.nv_id = nv.nv_id) >= #{minEp}
            AND (SELECT COUNT(*) FROM episode ev WHERE ev.nv_id = nv.nv_id) <= #{maxEp}
        ]]>
        <if test="favoriteGenres != null and favoriteGenres.size > 0">
            AND nvl.nvctg_id IN
            <foreach item="genreId" collection="favoriteGenres" open="(" separator="," close=")">
                #{genreId}
            </foreach>
        </if>
         GROUP BY nv.nv_id, nv.nv_title, nv.nv_desc, nv.cover_path, nv.updated_at, nv.is_adult, nv.is_secret, u.nickname, ctg.nvctg_name

    </select>

    <select id="getTitleSuggestions" parameterType="String" resultType="com.test.novel.NovelVO">
        SELECT *
        FROM (
        SELECT nv.nv_id, nv.nv_title, nv.is_adult
        FROM novels nv
        WHERE nv.is_secret != 1
            ORDER BY
                CASE
                WHEN REGEXP_LIKE(nv.nv_title, #{keywords}, 'i') THEN 0
                ELSE 1
                END,
                nv.nv_title
            )
        <![CDATA[
        WHERE ROWNUM <= 10  -- 결과를 15개로 제한
            ]]>
    </select>

    <select id="getAuthorSuggestions" parameterType="String" resultType="com.test.novel.NovelVO">
        SELECT * FROM (
        SELECT u.userno, u.nickname FROM users u
        WHERE u.is_author != 0
        ORDER BY
            CASE
                WHEN REGEXP_LIKE(u.nickname, #{keywords}, 'i') THEN 0
                ELSE 1
                END,
            u.nickname
            )
        <![CDATA[
        WHERE ROWNUM <= 10  -- 결과를 15개로 제한
        ]]>
    </select>
</mapper>